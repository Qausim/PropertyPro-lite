{
  "swagger": "2.0",
  "info": {
    "description": "A property listing web application, for creating and/or search properties for sale or rent",
    "version": "1.0.0",
    "title": "PropertyPro-lite",
    "contact": {
      "email": "qauzeemyusuff2@gmail.com"
    },
    "license": {
      "name": "MIT",
      "url": "propertyprolite-api.herokuapp.com"
    }
  },
  "host": "",
  "basePath": "/api/v1",
  "tags": [
    {
      "name": "Property",
      "description": "View, create, sell and buy properties"
    }
  ],
  "schemes": [
    "https",
    "http"
  ],
  "paths": {
    "/auth/signup": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "User can sign up",
        "description": "This endpoint receives POST requests to create new user accounts",
        "operationId": "registerUser",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "Request parameters",
            "description": "",
            "schema": {
              "$ref": "#/definitions/SignupRequestBody"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Success"
          },
          "400": {
            "description": "Invalid input or empty required field"
          },
          "409": {
            "description": "Email conflicts with existing an account"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/auth/signin": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "User can sign in",
        "description": "This endpoint receives POST requests to sign into existing user accounts",
        "operationId": "signIn",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "Request parameters",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SigninRequestBody"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Success"
          },
          "400": {
            "description": "Invalid input or empty required field"
          },
          "409": {
            "description": "Email conflicts with existing account's"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/property": {
      "post": {
        "tags": [
          "Create Property Ad"
        ],
        "summary": "Create property advert",
        "description": "This endpoint receives POST requests to create new property adverts",
        "operationId": "createPropertyAd",
        "security": [
          {
            "authToken": []
          }
        ],
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "formData",
            "name": "type",
            "description": "Property type",
            "type": "string",
            "required": true
          },
          {
            "in": "formData",
            "name": "state",
            "description": "Property state",
            "type": "string",
            "required": true
          },
          {
            "in": "formData",
            "name": "city",
            "description": "Property city",
            "type": "string",
            "required": true
          },
          {
            "in": "formData",
            "name": "address",
            "description": "Property address",
            "type": "string",
            "required": true
          },
          {
            "in": "formData",
            "name": "price",
            "description": "Property price",
            "type": "number",
            "required": true
          },
          {
            "in": "formData",
            "name": "property_image",
            "description": "Property image",
            "type": "file"
          }
        ],
        "responses": {
          "201": {
            "description": "Success"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Not an agent"
          },
          "500": {
            "description": "Server error"
          }
        }
      },
      "get": {
        "tags": [
          "Get Properties"
        ],
        "summary": "Get all or filter properties",
        "description": "This endpoint receives GET requests to retrieve all property ads or filter by type",
        "operationId": "getProperties",
        "security": [
          {
            "authToken": []
          }
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "type",
            "in": "query",
            "description": "The type to filter by",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/property/{propertyId}": {
      "get": {
        "tags": [
          "Get Property"
        ],
        "summary": "Get a property by its ID",
        "description": "This endpoint receives GET requests to retrieve a specific property item",
        "operationId": "getPropertyById",
        "security": [
          {
            "authToken": []
          }
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "propertyId",
            "in": "path",
            "description": "ID of property to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Invalid propertyId"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          }
        }
      },
      "patch": {
        "tags": [
          "Update Property"
        ],
        "summary": "Update a property item",
        "description": "This endpoint receives PATCH requests to update the details of a property advert",
        "operationId": "updateProperty",
        "security": [
          {
            "authToken": []
          }
        ],
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "propertyId",
            "in": "path",
            "description": "ID of property to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "formData",
            "name": "type",
            "description": "Property type",
            "type": "string"
          },
          {
            "in": "formData",
            "name": "state",
            "description": "Property state",
            "type": "string"
          },
          {
            "in": "formData",
            "name": "city",
            "description": "Property city",
            "type": "string"
          },
          {
            "in": "formData",
            "name": "address",
            "description": "Property address",
            "type": "string"
          },
          {
            "in": "formData",
            "name": "price",
            "description": "Property price",
            "type": "number"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Invalid propertyId"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "No permission"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      },
      "delete": {
        "tags": [
          "Delete Property"
        ],
        "summary": "Delete a property advert",
        "description": "This endpoint receives DELETE requests to delete a property advert",
        "operationId": "deleteProperty",
        "security": [
          {
            "authToken": []
          }
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "propertyId",
            "in": "path",
            "description": "ID of property to delete",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Invalid propertyId"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "No permission"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/property/{propertyId}/sold": {
      "patch": {
        "tags": [
          "Update Property"
        ],
        "summary": "Update a property item",
        "description": "This endpoint receives PATCH requests to update the details of a property advert",
        "operationId": "markPropertyAsSold",
        "security": [
          {
            "authToken": []
          }
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "propertyId",
            "in": "path",
            "description": "ID of property to mark as sold",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Invalid propertyId"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "No permission"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    }
  },
  "securityDefinitions": {
    "authToken": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header"
    }
  },
  "definitions": {
    "SignupRequestBody": {
      "type": "object",
      "required": [
        "email",
        "password",
        "first_name",
        "last_name",
        "is_agent",
        "phone_number",
        "address"
      ],
      "properties": {
        "email": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "first_name": {
          "type": "string"
        },
        "last_name": {
          "type": "string"
        },
        "is_agent": {
          "type": "boolean"
        },
        "phone_number": {
          "type": "string"
        },
        "address": {
          "type": "string"
        }
      }
    },
    "SigninRequestBody": {
      "type": "object",
      "required": [
        "email",
        "password"
      ],
      "properties": {
        "email": {
          "type": "string"
        },
        "password": {
          "type": "string"
        }
      }
    }
  }
}